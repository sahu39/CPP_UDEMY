															Opearator Overloading
															---------------------
-Allows user defined types to behave similar to built-in types.
-Using traditional operators such as +,-,=,* with user defined types.
	e.g: 
	----
	+ is used for adding two data types of either integer,double or float etc. traditionally. Using Operator overloading concept we can
    define behaviour like add 2 class object or add 2 srings(Appending 2 strings using +) etc.
	
-Following Operators can not be overloaded.
	::
	:?
	.*
	.
	sizeof

Basic rules:
============
-Precedence and associavity can't be changed.
-"arity" can't be changed(e.g +,-,*,/ are binary which means 2 operand required can't change to 1 operand)
-can't overload opertor's for primitive types(e.g:int,double, etc.)
-Can't create new operators.
-[],(),->,= must be declared as member method of a class.
-other operators can be declared as member method or global functions.

Examples of Operator Overloading:(Operators on User defined types)
=======================================
std::string
------------
s1 = s2+s3
S1 < S2
std::cout << S1

Mystring:
-----------
s1 = s2+s3
s1 < s2
s1 == s2
std::cout << s1;

Player:
---------
Player P1,P2;
P1 < P2;---------------------Might be comparing the health attributes using operator overloading.
p1 == p2;--------------------Might be comparing name,health and XP or some of them using opertaor overloading.(Comparing attributes usng operators)
std::cout << p1;-------------Overloading stream insertion operator to insert player object into stream.


-Assignment operators overloading:
=======================================
Mystring S1 {"FRANK"};
Mystring S2 = S1;//----------------->NOT Assignment
                 //----------------->Same as S2{S1}
S2 = S1;//-------------------------->Assignment as S2 previously created and initialized in the previous statement.

-Assignment occurs if object is initilized previously and you want to assign another object to it
-in C++ '=' invokes copy constructor(Shallow Copy) by default.
-Behaviour of  assignment '=' is memberwise assignment.(Shallow Copy)
-If we have raw pointer in our class then we will overload the assignment operator(=) to do the deep copy to avoid the shallow copy.

Overloading the Copy assignment operator(deep copy):
========================================================
						Type &Type::operator=(const Type &rhs);
						
Example:
---------
Mystring &Mystring::Operator=(const Mystring &rhs);

S2 = S1 //This will assign S2 to S1
	|
	|
	|Same as
   \|/
S2.operator=(S1) //operator= method is called.


Overlodaed assignment operator Function:
=========================================
Mystring &Mystring::Operator=(const Mystring &rhs)
{
	if(this == &rhs)// object in the Left hand side is refered as this and object in the right hand side is reffered as rhs
	{
		return *this;                             //if you are doing p1 = p1 or checking for self assignment
	}
	delete str[];                                 //delete the allocated memory assigned by str from heap or dellocate the storage
	str = new char[std::strlen(rhs.str) + 1];     //Assign the heap memory of length equals to rhs member str length.
	std::strcpy(str,rhs.str);					  //Perform  the copy.
	return *this;
}					
						




